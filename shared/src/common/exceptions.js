"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BookingsNotFoundException = exports.BookingNotFoundException = exports.InsufficientPriviledgeException = exports.HotelNotFoundException = exports.IncorrectPasswordException = exports.IncorrectLoginCredentialsException = exports.TargetVerifiedException = exports.TargetNotVerifiedException = exports.UserNotFoundException = exports.TokenInvalidException = exports.TokenNotFoundException = exports.AccountRecoveryTokenInvalidException = exports.RecoveryTokenExistsException = exports.VerifiedPhoneAlreadyExistsException = exports.VerifiedEmailAlreadyExistsException = exports.PhoneAlreadyUsedException = exports.EmailAlreadyUsedException = void 0;
const common_1 = require("@nestjs/common");
const EmailAlreadyUsedException = () => new common_1.ConflictException('email already in use, proceed to verify email');
exports.EmailAlreadyUsedException = EmailAlreadyUsedException;
const PhoneAlreadyUsedException = () => new common_1.ConflictException('phone already in use, proceed to verify phone');
exports.PhoneAlreadyUsedException = PhoneAlreadyUsedException;
const VerifiedEmailAlreadyExistsException = () => new common_1.ConflictException('verified email already exists');
exports.VerifiedEmailAlreadyExistsException = VerifiedEmailAlreadyExistsException;
const VerifiedPhoneAlreadyExistsException = () => new common_1.ConflictException('verified phone already exists');
exports.VerifiedPhoneAlreadyExistsException = VerifiedPhoneAlreadyExistsException;
const RecoveryTokenExistsException = () => new common_1.ConflictException('recovery token already exists');
exports.RecoveryTokenExistsException = RecoveryTokenExistsException;
const AccountRecoveryTokenInvalidException = () => new common_1.ForbiddenException('account recovery token is invalid or has expired.');
exports.AccountRecoveryTokenInvalidException = AccountRecoveryTokenInvalidException;
const TokenNotFoundException = () => new common_1.NotFoundException('token not found');
exports.TokenNotFoundException = TokenNotFoundException;
const TokenInvalidException = () => new common_1.ForbiddenException('token is invalid or has expired');
exports.TokenInvalidException = TokenInvalidException;
const UserNotFoundException = () => new common_1.NotFoundException('user not found');
exports.UserNotFoundException = UserNotFoundException;
const TargetNotVerifiedException = () => new common_1.ForbiddenException('target not verified');
exports.TargetNotVerifiedException = TargetNotVerifiedException;
const TargetVerifiedException = () => new common_1.ForbiddenException('target already verified');
exports.TargetVerifiedException = TargetVerifiedException;
const IncorrectLoginCredentialsException = () => new common_1.UnauthorizedException('login credentials are incorrect');
exports.IncorrectLoginCredentialsException = IncorrectLoginCredentialsException;
const IncorrectPasswordException = () => new common_1.UnauthorizedException('password is incorrect');
exports.IncorrectPasswordException = IncorrectPasswordException;
const HotelNotFoundException = () => new common_1.NotFoundException('hotel not found');
exports.HotelNotFoundException = HotelNotFoundException;
const InsufficientPriviledgeException = () => new common_1.ForbiddenException('access denied due to insufficient priviledges');
exports.InsufficientPriviledgeException = InsufficientPriviledgeException;
const BookingNotFoundException = () => new common_1.NotFoundException('booking not found');
exports.BookingNotFoundException = BookingNotFoundException;
const BookingsNotFoundException = () => new common_1.NotFoundException('bookings not found');
exports.BookingsNotFoundException = BookingsNotFoundException;
//# sourceMappingURL=exceptions.js.map